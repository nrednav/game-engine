#version 400 core

const int MAX_LIGHT_COUNT = 4;

in vec2 pass_texture_coords;
in vec3 surface_normal;
in vec3 to_light_vector[MAX_LIGHT_COUNT];
in vec3 to_camera_vector;
in float visibility;

out vec4 out_color;

uniform sampler2D model_texture;
uniform vec3 light_color[MAX_LIGHT_COUNT];
uniform vec3 light_attenuation[MAX_LIGHT_COUNT];
uniform float shine_damper;
uniform float reflectivity;
uniform vec3 sky_color;

void main(void) {
	vec3 unit_normal = normalize(surface_normal);
	vec3 unit_vector_to_camera = normalize(to_camera_vector);

	vec3 total_diffuse = vec3(0.0);
	vec3 total_specular = vec3(0.0);

	for (int i = 0; i < MAX_LIGHT_COUNT; i++) {
		float distance = length(to_light_vector[i]);
		float attenuation_factor = light_attenuation[i].x
			+ (light_attenuation[i].y * distance)
			+ (light_attenuation[i].z * distance * distance);
		vec3 unit_vector_to_light = normalize(to_light_vector[i]);

		float n_dot_lv = dot(unit_normal, unit_vector_to_light);
		float brightness = max(n_dot_lv, 0.0);

		vec3 light_direction = -unit_vector_to_light;
		vec3 reflected_light_direction = reflect(light_direction, unit_normal);

		float specular_factor = dot(reflected_light_direction, unit_vector_to_camera);

		specular_factor = max(specular_factor, 0.0);
		float damped_factor = pow(specular_factor, shine_damper);

		total_diffuse = total_diffuse
			+ (brightness * light_color[i]) / attenuation_factor;

		total_specular = total_specular
			+ (damped_factor * reflectivity * light_color[i]) / attenuation_factor;
	}

	total_diffuse = max(total_diffuse, 0.2);

	vec4 texture_color = texture(model_texture, pass_texture_coords);

	if (texture_color.a < 0.5) {
		discard;
	}

	out_color = vec4(total_diffuse, 1.0) * texture_color + vec4(total_specular, 1.0);
	out_color = mix(vec4(sky_color, 1.0), out_color, visibility);
}

