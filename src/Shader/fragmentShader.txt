#version 400 core

const int MAX_LIGHT_COUNT = 4;

in vec2 pass_textureCoords;
in vec3 surfaceNormal;
in vec3 toLightVector[MAX_LIGHT_COUNT];
in vec3 toCameraVector;
in float visibility;

out vec4 out_Color;

uniform sampler2D modelTexture;
uniform vec3 lightColor[MAX_LIGHT_COUNT];
uniform vec3 lightAttenuation[MAX_LIGHT_COUNT];
uniform float shineDamper;
uniform float reflectivity;
uniform vec3 skyColor;

void main(void) {
	
	vec3 unitNormal = normalize(surfaceNormal);
	vec3 unitVectorToCamera = normalize(toCameraVector);

	vec3 totalDiffuse = vec3(0.0);
	vec3 totalSpecular = vec3(0.0);

	for (int i = 0; i < MAX_LIGHT_COUNT; i++) {
		float distance = length(toLightVector[i]);
		float attenuationFactor = lightAttenuation[i].x
			+ (lightAttenuation[i].y * distance)
			+ (lightAttenuation[i].z * distance * distance);
		vec3 unitVectorToLight = normalize(toLightVector[i]);

		float n_dot_lv = dot(unitNormal, unitVectorToLight);
		float brightness = max(n_dot_lv, 0.0);

		vec3 lightDirection = -unitVectorToLight;
		vec3 reflectedLightDirection = reflect(lightDirection, unitNormal);

		float specularFactor = dot(reflectedLightDirection, unitVectorToCamera);
		specularFactor = max(specularFactor, 0.0);
		float dampedFactor = pow(specularFactor, shineDamper);

		totalDiffuse = totalDiffuse
			+ (brightness * lightColor[i]) / attenuationFactor;

		totalSpecular = totalSpecular
			+ (dampedFactor * reflectivity * lightColor[i]) / attenuationFactor;
	}

	totalDiffuse = max(totalDiffuse, 0.2);
	
	vec4 textureColor = texture(modelTexture, pass_textureCoords);

	if (textureColor.a < 0.5) {
		discard;
	}

	out_Color = vec4(totalDiffuse, 1.0) * textureColor + vec4(totalSpecular, 1.0);
	out_Color = mix(vec4(skyColor, 1.0), out_Color, visibility);
}